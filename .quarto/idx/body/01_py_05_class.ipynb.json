{"title":"类和对象","markdown":{"yaml":{"title":"类和对象"},"headingText":"类和对象介绍","containsRefs":false,"markdown":"\n\n\n\n\n\n**类** （ **class**）是面向对象编程的基础。面向对象编程通过对客观世界和问题进行高度的抽象，极大简化了编程工作。\n\n实际上，Python语言同时支持过程式以及函数式编程，完全可以在不定义类的情况下进行编程，但是不可能不使用类：在Python中，几乎所有数据都是以类的形式存在的：包括我们已经频繁使用的整型、浮点型、字符串、列表等等，都是类。\n\n类是一个抽象的定义，包括了属性和方法。比如，在客观世界中，当我们提到「猫」这一类动物时时，一方面会通过品种、毛色、体重等描述猫，这些是所谓的**属性**（**property**）；而**方法**（**method**）即猫的动作，比如猫可以吃饭、喝水、爬树等各种动作。\n\n在Python中，属性即一个类中所定义的变量，而方法即类中定义的函数。在Python中，可以使用class关键字声明一个类：\n\n\n\n以上通过class关键字定义了一个类，名字叫做Cat。Cat类有一个属性，称为weight，默认值为8；此外还有一个方法，称为get_weight()，这个方法所做的就是返回Cat类的weight属性。\n\n以上定义的是类，经过定义后，还需要经过实例化，变成对象。注意类和对象的区别：类是一个抽象的、统一的集合，对象是类的具体化，可以具有差异性，比如：\n\n注意以上我们使用Cat()创建了一个新的cat对象的实例，或者对象：lucas和huahua，并分别修改了他们的weight属性，接着使用get_weight()方法获得了分别的weight属性，并将其打印出来。\n\n注意对于对象的属性的修改不影响类的属性。\n\n注意以上定义过程中的self关键字。self代表这个对象本身。在定义类时，为了使得对象能够调用自身的属性、方法等，都需要使用self关键字，所以在类里面定义方法时，第一个参数都是self。\n\n此外，有的属性、方法可能只允许在类内部读写，而不允许外部读写，此时可以在属性或者方法名前面加两个下划线，比如：\n\n从上面的运行结果中可以看到，\\_\\_weight属性在类外是看不到的，强制读取会导致错误。但是如果直接写lucas.\\_\\_weight，实际上是在lucas对象中新增了一个属性，而非内部的\\_\\_weight属性。\n\n但是如果我们调用get_weight()方法，由于该方法是类里面的成员，因而可以访问\\_\\_weight属性。\n\n最后，我们需要搞清楚在对象创建时发生了什么。以上我们使用Cat()创建了一个新的对象，但是我们实际上是没有没有创建Cat()函数的，那么这个创建是怎么执行的呢？\n\n在Cat()调用时，Python会自动搜索类中定义的两个特殊函数：\\_\\_new\\_\\_()以及\\_\\_init\\_\\_()，并分别执行他们。\\_\\_new\\_\\_()函数用于创建对象，\\_\\_init\\_\\_()用于初始化对象，称为构造函数。与之对称的，还有\\_\\_del\\_\\_()函数，即当对象被删除时使用，称为析构函数。\n\n一个例子：\n\n注意在以上代码中，在类Cat的定义中，我们额外定义了一个函数：\\_\\_init\\_\\_()函数，该函数除了self之外，还接受name, weight, age等参数。\n\n而在创建对象时，我们使用的cat()函数的参数实际上就是\\_\\_init\\_\\_()函数的参数（除了self），当Cat()执行时，会默认将参数传给\\_\\_init\\_\\_()，执行该函数并创建一个新的对象。\n\n在\\_\\_init\\_\\_()中，我们将weight和age两个参数赋值给了\\_\\_weight、\\_\\_age两个私有变量。在使用过程中，如果需要重新设置\\_\\_weight、\\_\\_age，需要使用set_weight、set_age两个函数。如果需要读取，需要使用get_weight、get_age两个函数。在面向对象编程中，类定义外不直接修改、读取属性，而是通过函数进行读取、修改是非常好的习惯。\n\n## 继承\n\n客观世界中有很多分类都是具有层级关系的，比如对生物的分类，就可以分门、纲、目、科、属、种，属于同一种类别的一般享有共同的特征和行为。比如，猫和虎都属于猫科动物，具有很多相同的特征，但是由于属于不同属，因而也有不同的特征。\n\n在Python中，构造一个类时，可以声明该类继承了另外一个类，比如使用：\n```python\nclass Cat(Felidae):\n    pass\n```\n\n就生命了一个类Cat，该类继承了类Felidae，即Cat类现在具有所有Felidae类的属性、方法。\n\n在类的定义体中，可以使用super()函数获得其父类，因而如果我们需要调用父类的\\_\\_init\\_\\_()函数，只需要使用：super().\\_\\_init\\_\\_()就可以了。\n\n除了继承父类的所有属性和方法外，子类还可以新增属性、方法，或者重新定义父类的属性、方法。\n\n以下给出了一个例子：\n\n在上面的代码中，我们首先定义了一个类：Felidae，接着创建了Felidae的两个子类：Cat和Lion。\n\n注意在Cat中我们定义了一个新的方法：shout()，该方法是父类Felidae中所没有的。\n\n而Cat中的color以及Lion中的sex两个属性都是其父类中没有的。\n\n此外，虽然在Felidae中定义了catch()方法，但是没有做任何操作，而在两个子类中，都重新定义了该方法。\n","srcMarkdownNoYaml":"\n\n\n\n\n## 类和对象介绍\n\n**类** （ **class**）是面向对象编程的基础。面向对象编程通过对客观世界和问题进行高度的抽象，极大简化了编程工作。\n\n实际上，Python语言同时支持过程式以及函数式编程，完全可以在不定义类的情况下进行编程，但是不可能不使用类：在Python中，几乎所有数据都是以类的形式存在的：包括我们已经频繁使用的整型、浮点型、字符串、列表等等，都是类。\n\n类是一个抽象的定义，包括了属性和方法。比如，在客观世界中，当我们提到「猫」这一类动物时时，一方面会通过品种、毛色、体重等描述猫，这些是所谓的**属性**（**property**）；而**方法**（**method**）即猫的动作，比如猫可以吃饭、喝水、爬树等各种动作。\n\n在Python中，属性即一个类中所定义的变量，而方法即类中定义的函数。在Python中，可以使用class关键字声明一个类：\n\n\n\n以上通过class关键字定义了一个类，名字叫做Cat。Cat类有一个属性，称为weight，默认值为8；此外还有一个方法，称为get_weight()，这个方法所做的就是返回Cat类的weight属性。\n\n以上定义的是类，经过定义后，还需要经过实例化，变成对象。注意类和对象的区别：类是一个抽象的、统一的集合，对象是类的具体化，可以具有差异性，比如：\n\n注意以上我们使用Cat()创建了一个新的cat对象的实例，或者对象：lucas和huahua，并分别修改了他们的weight属性，接着使用get_weight()方法获得了分别的weight属性，并将其打印出来。\n\n注意对于对象的属性的修改不影响类的属性。\n\n注意以上定义过程中的self关键字。self代表这个对象本身。在定义类时，为了使得对象能够调用自身的属性、方法等，都需要使用self关键字，所以在类里面定义方法时，第一个参数都是self。\n\n此外，有的属性、方法可能只允许在类内部读写，而不允许外部读写，此时可以在属性或者方法名前面加两个下划线，比如：\n\n从上面的运行结果中可以看到，\\_\\_weight属性在类外是看不到的，强制读取会导致错误。但是如果直接写lucas.\\_\\_weight，实际上是在lucas对象中新增了一个属性，而非内部的\\_\\_weight属性。\n\n但是如果我们调用get_weight()方法，由于该方法是类里面的成员，因而可以访问\\_\\_weight属性。\n\n最后，我们需要搞清楚在对象创建时发生了什么。以上我们使用Cat()创建了一个新的对象，但是我们实际上是没有没有创建Cat()函数的，那么这个创建是怎么执行的呢？\n\n在Cat()调用时，Python会自动搜索类中定义的两个特殊函数：\\_\\_new\\_\\_()以及\\_\\_init\\_\\_()，并分别执行他们。\\_\\_new\\_\\_()函数用于创建对象，\\_\\_init\\_\\_()用于初始化对象，称为构造函数。与之对称的，还有\\_\\_del\\_\\_()函数，即当对象被删除时使用，称为析构函数。\n\n一个例子：\n\n注意在以上代码中，在类Cat的定义中，我们额外定义了一个函数：\\_\\_init\\_\\_()函数，该函数除了self之外，还接受name, weight, age等参数。\n\n而在创建对象时，我们使用的cat()函数的参数实际上就是\\_\\_init\\_\\_()函数的参数（除了self），当Cat()执行时，会默认将参数传给\\_\\_init\\_\\_()，执行该函数并创建一个新的对象。\n\n在\\_\\_init\\_\\_()中，我们将weight和age两个参数赋值给了\\_\\_weight、\\_\\_age两个私有变量。在使用过程中，如果需要重新设置\\_\\_weight、\\_\\_age，需要使用set_weight、set_age两个函数。如果需要读取，需要使用get_weight、get_age两个函数。在面向对象编程中，类定义外不直接修改、读取属性，而是通过函数进行读取、修改是非常好的习惯。\n\n## 继承\n\n客观世界中有很多分类都是具有层级关系的，比如对生物的分类，就可以分门、纲、目、科、属、种，属于同一种类别的一般享有共同的特征和行为。比如，猫和虎都属于猫科动物，具有很多相同的特征，但是由于属于不同属，因而也有不同的特征。\n\n在Python中，构造一个类时，可以声明该类继承了另外一个类，比如使用：\n```python\nclass Cat(Felidae):\n    pass\n```\n\n就生命了一个类Cat，该类继承了类Felidae，即Cat类现在具有所有Felidae类的属性、方法。\n\n在类的定义体中，可以使用super()函数获得其父类，因而如果我们需要调用父类的\\_\\_init\\_\\_()函数，只需要使用：super().\\_\\_init\\_\\_()就可以了。\n\n除了继承父类的所有属性和方法外，子类还可以新增属性、方法，或者重新定义父类的属性、方法。\n\n以下给出了一个例子：\n\n在上面的代码中，我们首先定义了一个类：Felidae，接着创建了Felidae的两个子类：Cat和Lion。\n\n注意在Cat中我们定义了一个新的方法：shout()，该方法是父类Felidae中所没有的。\n\n而Cat中的color以及Lion中的sex两个属性都是其父类中没有的。\n\n此外，虽然在Felidae中定义了catch()方法，但是没有做任何操作，而在两个子类中，都重新定义了该方法。\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":true,"highlight-style":"atom-one","css":["../styles.css"],"output-file":"01_py_05_class.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","editor":"visual","theme":"cosmo","linestretch":1.6,"fontsize":"11.5pt","highlight":true,"callout-appearance":"default","md-extensions":["callout"],"includes":{"after-body":"../_includes/counter.html"},"title":"类和对象"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}