{"title":"Python 入门","markdown":{"yaml":{"title":"Python 入门"},"headingText":"数值类型和计算","containsRefs":false,"markdown":"\n\n\n\n\n\n\n\n> 参考资料\n\n- [Python 官网：Python 教程](https://docs.python.org/zh-cn/3.13/tutorial/index.html)\n\n::: {.callout-note}\n本章内容源自上海对外经贸大学司继春老师的讲义，略有改动。\n:::\n\n参考教程：\n\n- [Python 3.12.10 documentation](https://docs.python.org/3.12/)\n  - [Tutorial](https://docs.python.org/3.12/tutorial/index.html)\n  - [Python 模块索引](https://docs.python.org/3.12/py-modindex.html)\n    - 这个非常好用，可以很方便地查询常用模块的方法和属性，例如 [os 模块](https://docs.python.org/3.12/library/os.html#module-os)\n  - [PEP 8 – Style Guide for Python Code](https://peps.python.org/pep-0008/#indentation)\n- [Google 的 Python 课程](https://developers.google.com/edu/python?hl=zh-cn)\n  - 简洁、重点突出\n  - 内容：Python 设置，Python 简介，字符串，列表，排序，记录和文件，正则表达式\n- Python 包大集合\n  - [Awesome Python Data Science](https://krzjoa.github.io/awesome-python-data-science/#/?id=machine-learning)\n\n\nPython 语言简单易懂，多数语句都非常符合人类语言的直觉。比如，计算两个数字相加：\n\n我们也可以把它赋值给一个变量，然后再调用 (比如，打印出来)：\n\n此处的 `print()` 是一个函数，表示打印出括号内的内容。Python 中的多数运算和操作都是通过函数来实现的。这里，我们采用 `print()` 函数来打印一些常用的数学运算的结果：\n\n不同于 C 和 Java 等语言，Python 不需要预先声明变量的类型，它会根据赋值的内容自动推断变量的类型：\n\n### 变量类型\n\nPython 支持整数和浮点数两种数值类型。整数是没有小数点的数字，比如 `1`、`2`、`3` 等；而浮点数是带有小数点的数字，比如 `1.0`、`2.5`、`3.14` 等。\n我们可以使用 `type()` 函数来查看一个变量的类型：\n\n```python\ntype(10)   # int\ntype(10.0) # float\n```\n\n很多时候我们也会用到字符型变量：\n\n说明：字符串需要用单引号或双引号括起来，Python 会自动识别。比如，`'hello'` 和 `\"hello\"` 是等价的。如果你在字符串中需要使用单引号，可以用双引号括起来，反之亦然。比如，`\"I'm a student\"` 和 `'I\\'m a student'` 是等价的。\n\n## 逻辑运算与比较\n\n在数据清洗阶段，经常需要根据特定的条件删除或筛选变量和观察值，这就需要使用 `>`、`<`、`>=`、`<=`、`==` 和 `!=` 等比较运算符来进行逻辑判断。\n\n注意以上程序的结果返回的是 **True** 和 **False**，这两个值在 Python 中分别代表 '逻辑真' 和 '逻辑假'。逻辑真、假之间可以有与、或、非的运算：\n\n有兴趣的读者可以测试一下如下表达式的返回值：\n\n```python\n(5<5) and (3>4)            # False and False\n(5==5) or ('Cat'=='Dog')   # True or False\nnot ('Cat'!='Dog')         # not True\n```\n\n注意：\n- Python 中的逻辑运算符是 `and`、`or` 和 `not`，而不是 `&&`、`||` 和 `!`。这与 C 和 Java 等语言不同。\n- 判断是否相等需要用双等号 `==`，判断不相等要使用 `!=`，否则会报错：\n\n## 运算优先级\n\n以上我们介绍了几种常见的运算，包括：\n\n* 算数运算\n  - `+`\n  - `-`\n  - `\\*`\n  - `/`\n  - `//`\n  - `%`\n  - `\\*\\*`\n* 比较运算\n  - `==`\n  - `!=`\n  - `<`\n  - `<=`\n  - `>`\n  - `>=`\n* 逻辑运算\n  - `and`\n  - `or`\n  - `not`\n\n这些运算符号并不是从左到右依次执行的，而是具有优先级顺序，比如：\n\n```python\n3 + 5*7 - 2\n```\n\n运算时，会先进行乘法运算，再执行加减运算：\n\nPython 中运算符的优先级从高到低依次为：\n\n1. `**`  \n2. `+`、`-`: 正负号  \n3. `*`、`/`、`%`\n4. `+`、`-`：加减运算  \n5. `==`、`!=`、`<`、`>`、`<=`、`>=`  \n6. `not`  \n7. `and`  \n8. `or`  \n\n请问，按照以上规则，如下表达式的运算顺序是什么？会得到什么结果？\n\n```python\n1>2 and 3>2\n```\n\n此外，需要注意幂运算的等级比正负号要高，所以如下两个表达式的结果是不同的：\n\n```python\n-2**2      # -4\n(-2)**2    #  4\n```\n\n对于 `-2**2`，其计算顺序是：先计算 $2^2$，再取负，得到了 $-4$。因此，在编写代码时，如果不确定变量 x 的值是正数还是负数，且需要进行类似 `x**2` 这样的运算，更稳妥的写法上 `(x)**2`。\n\n## 变量\n\n**变量**（variable）是几乎所有编程语言都具有的特性。变量实质上是内存中的一个区域，其中存储着某一些值。在 Python 中，由于不用像 C、Java 一样显示地指明变量类型，因而用起来非常简单，直接使用等号 \"=\" 赋值即可。比如，我们可以使用以下语句将 3 这个值保存在变量 x 中，并在后面引用这个变量：\n\n变量命名的基本规则如下：\n\n* 变量名不能以数字开头  \n* 变量名不能是 Python 的保留字符，比如 `is`、`in` 等  \n* 不能含有 `+`、`-`、`*`、空格等特殊字符，但可以包含下划线 `_`  \n* 变量名区分大小写\n\n虽然 Python 的变量名要求相对比较宽松，但是还是有一些良好的习惯需要注意：\n\n* 尽量不要使用中文做变量名  \n* 变量名要有意义，方便阅读  \n* 尽量不要使用下划线开头，因为下划线开头的变量在 Python 中可能有特殊含义  \n* 如果变量名包含几个单词，可以用下划线区分，或使用驼峰规则，如：`cat_weight`，或者 `CatWeight`  \n\n除了简单的使用等号赋值之外，Python 还有其他几个比较方便的赋值语句，比如：\n\n- `a += b` 等价于 `a = a + b`  \n- `a -= b` 等价于 `a = a - b`  \n- `a *= b` 等价于 `a = a * b`  \n- `a /= b` 等价于 `a = a / b`  \n- `a **= b` 等价于 `a = a ** b`  \n- `a //= b` 等价于 `a = a // b`  \n- `a %= b` 等价于 `a = a % b`  \n\n## 字符串\n\n除了数值类型，字符串也是一种常用的数据类型。在 Python 中，即可以用单引号 `''`，也可以用双引号 `\"\"` 来标记字符串，二者等价：\n\n采用两种标记符，有助于处理一些特殊情形，比如\n\n\n也就是说，字符串内包含 `'` 时，我们可以用双引号括起来，反之亦然。当然，有时候字符串内会同时包含单引号和双引号，此时我们可以使用转义字符 `\\` 来解决这个问题，比如：\n\n\n此处，我们用 `\\\"` 来表示字符串中的双引号，以避免与外围的双引号冲突。类似地，我们也可以用 `\\'` 来表示字符串中的单引号。\n\n除了单引号之外，还有一些其他的字符需要转义，比如，斜杠 `\\` 本身就需要转义，因为如果不对 `\\` 转义，解释器无法知晓这个斜杠是一个纯粹的斜杠，还是与后面的字符链接起来的转义字符，比如：\n\n除此之外，Python 中还有其他转义字符：\n\n* 每一行结尾处的 `\\`：续行符  \n* `\\\\`：反斜杠  \n* `\\'`：单引号  \n* `\\\"`：双引号  \n* `\\b`：退格  \n* `\\v`：纵向制表符  \n* `\\t`：横向制表符  \n* `\\r`：回车  \n* `\\n`：换行  \n* `\\f`：换页  \n* ......\n\n举几个例子：\n\n在 Python 中，`\\n` 表示 **换行符**，而 `\\r` 表示 **回车符**。它们的作用略有不同，具体如下：\n\n* `\\n` 会将光标移到下一行的开头，相当于“**换行并定位至该行行首**”；\n* `\\r` 只会将光标移到**当前行的行首**，但不会换行，因此它会从当前行的开头开始重新输出字符，可能会覆盖原来的内容。\n\n来看一个例子：\n\n第二个输出结果有点奇怪，是因为 `\\r` 把光标拉回了行首 (没有换行)，然后开始打印 `搞定了`。这会覆盖原有字符 `Downloading...` 中开头 3 个字符 (`Dow`)，最终变成了 `搞定了nloading...`。\n\n这种 `\\r` 的行为在一些进度条或动态打印时非常常见。下面的代码中，由于每次打印都用 `\\r` 把光标拉回了行首，覆盖原内容，所以你看到的其实**只有一行在不断刷新**。\n\n\n除了使用单引号和双引号表示字符串之外，Python 还支持长字符串、原始字符串两种表示方法：长字符串使用三个单引号 `'''` 或者三个双引号 `\"\"\"` 包裹，可以用来表示跨越多行的字符串。比如：\n\n而原始字符串即不对反斜杠进行转义，比如一个路径可能为：\n```python\na = \"C:\\network\\table\"\n```\n\n然而注意到，由于 `\\n` 有转义，所以 Python 解释器在碰到 `\\n` 时将其解释为回车。同理，`\\t` 则会被解释为 **Tab**：\n\n如果需要声明该字符串为原始字符串，可以直接在字符串前面加一个“r”，即：\n\n此时，Python解释器就不会将“\\\\n”进行转义了。\n\n此外，Python3中所有的字符串都是以Unicode进行编码的，因而极大地规避了在Python2以及其他语言中可能碰到的乱码问题，因而使用Python3是非常方便的。也正因为如此，我们可以很方便的使用Unicode字符，并使用“\\\\N{unicode_name}”来表示Unicode字符，比如：\n\nUnicode字符可以从 http://unicode-table.com 中找到。\n\n如果需要拼接两个字符串，可以简单的使用加号：\n\n最后需要额外注意的是，作为字符串的 \"3\" 和作为整型数据的 3 是完全不一样的。因此，我们不能使用如下表达式：\n```python\n\"3\" + 2\n```\n\n正确的做法是：先使用 `int()` 函数将字符串 \"3\" 转化为数值类型，再进行计算：\n\n同理，如果希望将一个数值型数字处理为字符串，也需要使用 `str()` 函数先将数字转化为字符串：\n\n## 列表和元组\n\n以上我们初步介绍了 Python 的三种基本数据类型：整型、浮点型以及字符串。接下来我们引入 Python 中的两种最基本也是最常用的数据结构：**列表**（list）和 **元组**（tuple）。\n\n列表和元组都是序列（sequence）的一种，可以看成是一些元素的集合，每个元素都有其位置编号，编号从 0 开始。列表使用方括号 \"[ ]\" 进行声明，而元组使用小括号 \"( )\" 进行声明，或者不用括号直接声明。列表和元组所包含的内容可以是任何 Python 允许的数据类型、对象等等。\n\n### 元组\n\n最简单也是最基本的是元组。元组不可更改，一旦创建，只能读取而不能写入 (定义后不能修改)，比如：\n\n我们可以使用元组名后面加一个方括号读取相应编号位的元素：\n\n由于编号从 0 开始，因而 `name_list[0]` 代表的是元组中的第一个元素，而 `name_list[1]` 代表第二个元素。方括号中也可以是负数，代表倒数第几个元素：\n\n此外，如果需要声明只有一个元素的元组，需要额外加一个逗号，否则解释器无法判断需要声明的是一个值还是一个元组：\n\n当然，在声明元组时，一个良好的习惯是加上括号，使得程序更具有可读性。\n\n由于元组也是 Python 中的对象，因而元组中的元素也可以是元组，并可以使用两个方括号对作为元组成员的元组中的元素进行读取操作：\n\n元组虽然不能修改，但支持切片（slicing）操作：可以从元组中取出一个子集。切片操作使用元组名后加方括号，在方括号中用冒号“:”指定起始和结束位置（注意是左闭右开区间）：\n\n实际上，切片操作还可以支持步进，切片的通用语法为：\n```python\nx[start:end:step]\n```\n\n其中start的默认值为0，step的默认值为1，而end的默认值为x的维数的大小。如果我们只想取出奇数位的元素，我们可以使用：\n\n以上切片操作被翻译为：从0开始，一直到结束，隔一个取一个元素。\n\n### 列表\n\n列表的很多操作跟元组类似，但是列表允许被修改，因而更加灵活，也有更多的操作。\n\n我们可以很方便的使用方括号定义一个列表：\n\n注意以上声明的过程中，与元组唯一的不同是我们在最外面使用了方括号而非圆括号。\n\n或者，我们可以使用 `list()` 将一个**可迭代**（**iterable**）的对象（包括字符串、元组、列表等）转化为一个列表，比如：\n\n与列表不同的是，我们可以对列表进行修改操作：\n\n以及使用del语句进行删除操作：\n\n当然，也可以进行新增，使用列表的append()方法可以在列表最后添加一个元素，比如：\n\n如果需要添加的元素比较多，可以使用extend()方法，比如：\n\n如果需要在某一个位置插入元素，可以使用insert()方法：\n\n还可以使用count()方法计算某个元素出现的次数、使用index()方法找到某个元素第一次出现的位置，比如：\n\n需要特别注意的是，在Python中，使用等号将一个对象赋值给另一个对象，并不会导致对象的拷贝，而仅仅是给了一个别名，比如：\n\n在以上程序中，我们会发现，虽然我们删除的是another_play_list的第2个元素，但是实际上，another_player_list和play_list只是同一个变量的不同别名而已，并没有重新复制一个新的list。\n\n如果我们需要的是list的一个新的拷贝，需要使用list的copy()方法：\n\n最后，列表、元组、字符串还支持in操作符，该操作符判断in之前的元素是否属于之后的列表、元组或者字符串，比如：\n\n如果要判断in之前的元素“不属于”之后的列表、元组或字符串，可以使用“not in”:\n\n最后，我们还可以使用 `sort()` 方法对列表进行排序，比如：\n\n在比较复杂的情况下，还可以使用key选项制定排序的方式，比如，我们可能需要对player_list中的球员号码进行排序，可以使用：\n\n当然，以上的语法已经超出了目前所学范围，我们将在后面介绍lambda的含义。\n\n## 集合\n\n无论是列表还是元组，都允许有重复的元素存在，但是有时我们可能需要不重复的元素，此时可以使用**集合**（**set**）类。\n\n集合的声明与列表类似，区别在于集合使用大括号{}，而非中括号。\n\n与list()类似，可以使用使用set()构建集合：\n\n以上可以看到，set()构建了一个不重复元素组成的集合。可以使用add()方法以及update()方法为集合新增元素，比如：\n\n值得注意的是，在上面的程序中，我们添加了字符串'a'，以及一个元组('a',)，两者一个是字符串，一个是元组，是不同的，因而在集合中两者并不冲突。\n\n如果需要删除，可以使用remove()方法以及discard()方法，两者的区别在于：remove()方法不能删除不存在的元素，否则报错；而discard()方法如果要删除的元素不存在，不会报错。\n\n最后，作为集合，还可以使用issubset()和issuperset()方法判断某一个集合是不是另外一个集合的子集或者超集：\n\n## 控制语句：循环\n\n有时我们需要重复一条类似的命令很多次，此时我们可以使用循环命令。\n\n在Python中有两个循环语句：while和for，两者很大程度上是等价的，但是在不同情况下方便程度时不一样的。\n\nfor作为关键字，其基本语法为：\n```python\nfor var in iterable_obj:\n    ## code\n```\n\n其中var为一个变量，iterable_obj为一个可迭代对象，如列表、元组或者字符串，其后面紧接着跟着一个冒号。\n\n在这里需要注意的是，不像C或者Java使用大括号区分代码块，在Python中，主要靠缩进区分代码块，因而需要循环执行的代码，要写在for语句的下一行，并使用Tab键或者几个（一般为4/8个）空格进行缩进。\n\n比如，以下语句把字符串中的每个字符都分别打印出来：\n\n而以下代码将player_list中所有的人名及号码打印出来：\n\n注意到最后一行并没有被缩进，因而不属于需要循环执行的代码块，因而只执行了一次。\n\n此外，经常遇到的一个情形是对数字进行循环，此时可以使用range()函数。如果使用range(N)，将会返回一个可迭代的对象，其值为0,...,N-1。比如：\n\n也可以使用range(N,M)的形式，此时返回迭代对象的值为N,N+1,...,M-1，比如：\n\n使用以上特性，我们可以方便的使用range()函数来写for 循环，比如：\n\n其中len()函数取得name中元素的个数，由于len(name)的值为5，因而range(len(name))就产生了一个可以迭代的、值为0,1,2,3,4的对象。\n\n以下程序计算了从1到101的所有奇数的和：\n\n而while循环的语法为：\n```python\nwhile logic_expression:\n    ## code\n```\n\n同样，while循环的代码块也需要用缩进表示，而logic_expression是一个逻辑判断语句，只有当logic_expression值为真时，循环才继续执行，否则跳出循环。比如刚刚从1到101的所有奇数的和的代码也可以写为：\n\n特别需要注意的是一定不要忘了及时更新odd，否则很容易造成无限循环。\n\n## 控制语句：条件\n\n条件语句用于判断某一个逻辑表达式，如果为真，则执行某个代码块。其最基本的形式如下：\n```python\nif logic_expression:\n    ## code\n```\n\n同样，代码块也需要用缩进表示，其中的代码块只有当logic_expression的值为真时才执行，否则不执行。\n\n比如，如下的代码中，首先判断球员姓名是否为Messi或者Suárez，如果是，则打印其位置：\n\n此外，if 后面还可以跟elif语句：\n```python\nif logic_expression1:\n    ## code1\nelif logic_expression2:\n    ## code2\nelif  logic_expression3:\n    ## code3\n....\n```\n\n即“else if”，如果logic_expression1满足，则执行code1，如果不满足，则继续判断logic_expression2是否满足，若满足，则执行code2，以此类推。比如：\n\n最后，还可以加else语句，用于所有的if或者elif的逻辑表达式都不满足时执行\n\n此外，if语句可以与break、continue、pass等一起控制循环。其中：\n\n* break：跳出循环不再执行\n* countinue：跳出本次循环后面的代码，但是循环继续执行\n* pass：什么都不做，继续执行\n\n比如，计算从1到101的所有奇数的和的代码也可以写为：\n\n在以上代码中，while True代表循环会一直执行，但是if语句会判断odd是否大于了101，如果odd一旦大于101，就会使用break退出循环。\n\n如果我们需要计算从1到101的所有不能被5整除的奇数的和，可以使用pass语句：\n\n以下代码我们使用continue语句将一个字符串中所有的's'都给去掉\n\n在以上代码中，当碰到's'时，循环跳过了b+=s这一句，而是继续执行循环，直到循环结束。与之相比的是break命令直接跳出了循环：\n\n## 实例\n\n在上例中，我们使用了 **列表推导式**（List Comprehension）写法：`passed_students` 是一个新列表，它通过列表推导式从 `students` 列表中筛选出所有 `\"score\"` 大于等于 60 的学生字典 `s`。这种写法逻辑简洁、表达紧凑：\n\n```python\npassed_students = [s for s in students if s[\"score\"] >= 60]\n```\n\n它等价于下面的传统写法：\n\n```python\npassed_students = []\nfor s in students:\n    if s[\"score\"] >= 60:\n        passed_students.append(s)\n```\n\n两者实现的功能完全一致，都是**遍历 `students` 列表，对每个学生字典 `s` 检查其 `\"score\"` 值是否大于等于 60**，如果是，就将该学生加入新的列表 `passed_students`。\n\n列表推导式的优势在于：\n\n* 写法简洁，更适合一行逻辑较清晰的筛选任务；\n* 常用于数据清洗、筛选、转换等操作，阅读性和执行效率较高。\n\n当逻辑比较复杂（如嵌套循环或多个条件判断）时，仍推荐使用传统的 `for` 循环方式，更利于维护和调试。\n\n\n\n## 控制语句：异常\n\n理想与现实总是有差距的。在程序现实运行过程中，出于很多原因，总是可能会存在**异常**（**exception**）。比如，一个最简单的异常是，允许用户输入两个数字相除，但是用户却输入了0作为分母；或者，用户输入的不是数字，而是字母。此时，正常的程序可能会发生错误。\n\n任何高级语言几乎都带有处理异常的功能，Python也不例外。\n\n在Python中，可以使用try...except...else...finally语句来处理异常，语法为：\n```python\ntry:\n    # code1\nexcept Exception1:\n    # code2\nexcept Exception2:\n......\n\nelse:\n    # code3\nfinally:\n    #code4\n```\n\n首先，解释器会执行code1，如果没有错误，就执行code3，并继续下去。如果发生了错误，会查看具体发生何种错误，执行相应的except中的命令。最终，无论错误是否发生，code4都会被执行，并继续执行finally后面的代码。\n\n比如，下面一个例子展示了分母为0时的处理方法：\n\nexcept可以不止有一个，比如，我们可能还需要处理类型错误，比如将数字和字符串进行运算：\n\n或者可以将两者合并：\n\n如果不知道会发生什么错误，也可以什么也不加，捕获所有错误：\n\n更好的办法是将错误捕获，并打印出来方便调试：\n\n## 列表推导\n\n在Python中，可以结合循环语句for、判断语句if、else等，写出更加简洁的程序。\n\n比如，如果我们希望生成一个1...99中所有能被3整除的奇数的表达式，一般可以通过如下的程序：\n\n以上代码已经足够简洁，但是Python还支持以下更简洁的方式：\n\n当然，也支持双重循环，比如列出一个奇数元组，第一个分类能被3整除，第二个分类能被5整除：\n\n此外还支持else语句，比如，以下代码将1...10的所有奇数都取负数，所有偶数保持不变：\n\n注意如果需要使用else，if...else...要写在for前面。\n\n## 字典\n\n**字典**（**dictionary**）在Python中是一种映射关系，即特定的单词（**键**，**key**）以及其**值**（**value**）之间的关系。字典可以使用大括号配合冒号进行声明，比如之前的球员号码：\n\n在以上的代码中，我们使用大括号以及冒号声明了一个字典：playsers，其中键为\"Messi\"、\"Xavi\"等等，其值分别为10、6等等。接着，使用players\\['Messi'\\]取得了键为'Messi'的值。另外也可以使用dict()进行创建：\n\n与上面的结果一样。\n\n在循环语句中，可以使用通常的循环方法获得一个字典的keys：\n\n在以上循环中，我们使用循环遍历了players中所有的键，并将其值打印了出来。\n\n此外，字典还支持如下操作：\n\n* len(players)：字典players的键-值对的个数\n* del players(k)：删除键k\n* k in players：判断字典players中是否有键k\n\n比如：\n\n## Python中的None\n\n在Python中还有一个非常特殊的类型：None，即什么都没有。注意None并不是空的元组、列表，也不是空的字符串，就是None：\n\n由于None表示空的、没有，因而None跟其他任何数据类型比较都是返回False。\n\n如果要判断某个变量是否是None，可以使用is关键字：\n\n## 小结\n\n最后，我们使用一个综合的例子，回顾一下目前未知所学的内容。\n\n在接下来的程序中，我们使用input()函数从用户的输入中得到数字，知道用户输入“end”为止，并将所有的数字相加。\n\n在以上的程序中，我们首先使用input()函数获得用户输入，接着判断用户输入的是否为\"end\"，如果是，则退出，否则，由于input()获得的是一个字符串，因而我们使用float()函数将该字符串转换为一个浮点数字，再将其相加。\n\n但是以上程序并不完美，比如，如果用户输入的不是“end”也不是数字，就会报错，因而一个更完善的版本是加入错误处理：\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n\n> 参考资料\n\n- [Python 官网：Python 教程](https://docs.python.org/zh-cn/3.13/tutorial/index.html)\n\n::: {.callout-note}\n本章内容源自上海对外经贸大学司继春老师的讲义，略有改动。\n:::\n\n参考教程：\n\n- [Python 3.12.10 documentation](https://docs.python.org/3.12/)\n  - [Tutorial](https://docs.python.org/3.12/tutorial/index.html)\n  - [Python 模块索引](https://docs.python.org/3.12/py-modindex.html)\n    - 这个非常好用，可以很方便地查询常用模块的方法和属性，例如 [os 模块](https://docs.python.org/3.12/library/os.html#module-os)\n  - [PEP 8 – Style Guide for Python Code](https://peps.python.org/pep-0008/#indentation)\n- [Google 的 Python 课程](https://developers.google.com/edu/python?hl=zh-cn)\n  - 简洁、重点突出\n  - 内容：Python 设置，Python 简介，字符串，列表，排序，记录和文件，正则表达式\n- Python 包大集合\n  - [Awesome Python Data Science](https://krzjoa.github.io/awesome-python-data-science/#/?id=machine-learning)\n\n## 数值类型和计算\n\nPython 语言简单易懂，多数语句都非常符合人类语言的直觉。比如，计算两个数字相加：\n\n我们也可以把它赋值给一个变量，然后再调用 (比如，打印出来)：\n\n此处的 `print()` 是一个函数，表示打印出括号内的内容。Python 中的多数运算和操作都是通过函数来实现的。这里，我们采用 `print()` 函数来打印一些常用的数学运算的结果：\n\n不同于 C 和 Java 等语言，Python 不需要预先声明变量的类型，它会根据赋值的内容自动推断变量的类型：\n\n### 变量类型\n\nPython 支持整数和浮点数两种数值类型。整数是没有小数点的数字，比如 `1`、`2`、`3` 等；而浮点数是带有小数点的数字，比如 `1.0`、`2.5`、`3.14` 等。\n我们可以使用 `type()` 函数来查看一个变量的类型：\n\n```python\ntype(10)   # int\ntype(10.0) # float\n```\n\n很多时候我们也会用到字符型变量：\n\n说明：字符串需要用单引号或双引号括起来，Python 会自动识别。比如，`'hello'` 和 `\"hello\"` 是等价的。如果你在字符串中需要使用单引号，可以用双引号括起来，反之亦然。比如，`\"I'm a student\"` 和 `'I\\'m a student'` 是等价的。\n\n## 逻辑运算与比较\n\n在数据清洗阶段，经常需要根据特定的条件删除或筛选变量和观察值，这就需要使用 `>`、`<`、`>=`、`<=`、`==` 和 `!=` 等比较运算符来进行逻辑判断。\n\n注意以上程序的结果返回的是 **True** 和 **False**，这两个值在 Python 中分别代表 '逻辑真' 和 '逻辑假'。逻辑真、假之间可以有与、或、非的运算：\n\n有兴趣的读者可以测试一下如下表达式的返回值：\n\n```python\n(5<5) and (3>4)            # False and False\n(5==5) or ('Cat'=='Dog')   # True or False\nnot ('Cat'!='Dog')         # not True\n```\n\n注意：\n- Python 中的逻辑运算符是 `and`、`or` 和 `not`，而不是 `&&`、`||` 和 `!`。这与 C 和 Java 等语言不同。\n- 判断是否相等需要用双等号 `==`，判断不相等要使用 `!=`，否则会报错：\n\n## 运算优先级\n\n以上我们介绍了几种常见的运算，包括：\n\n* 算数运算\n  - `+`\n  - `-`\n  - `\\*`\n  - `/`\n  - `//`\n  - `%`\n  - `\\*\\*`\n* 比较运算\n  - `==`\n  - `!=`\n  - `<`\n  - `<=`\n  - `>`\n  - `>=`\n* 逻辑运算\n  - `and`\n  - `or`\n  - `not`\n\n这些运算符号并不是从左到右依次执行的，而是具有优先级顺序，比如：\n\n```python\n3 + 5*7 - 2\n```\n\n运算时，会先进行乘法运算，再执行加减运算：\n\nPython 中运算符的优先级从高到低依次为：\n\n1. `**`  \n2. `+`、`-`: 正负号  \n3. `*`、`/`、`%`\n4. `+`、`-`：加减运算  \n5. `==`、`!=`、`<`、`>`、`<=`、`>=`  \n6. `not`  \n7. `and`  \n8. `or`  \n\n请问，按照以上规则，如下表达式的运算顺序是什么？会得到什么结果？\n\n```python\n1>2 and 3>2\n```\n\n此外，需要注意幂运算的等级比正负号要高，所以如下两个表达式的结果是不同的：\n\n```python\n-2**2      # -4\n(-2)**2    #  4\n```\n\n对于 `-2**2`，其计算顺序是：先计算 $2^2$，再取负，得到了 $-4$。因此，在编写代码时，如果不确定变量 x 的值是正数还是负数，且需要进行类似 `x**2` 这样的运算，更稳妥的写法上 `(x)**2`。\n\n## 变量\n\n**变量**（variable）是几乎所有编程语言都具有的特性。变量实质上是内存中的一个区域，其中存储着某一些值。在 Python 中，由于不用像 C、Java 一样显示地指明变量类型，因而用起来非常简单，直接使用等号 \"=\" 赋值即可。比如，我们可以使用以下语句将 3 这个值保存在变量 x 中，并在后面引用这个变量：\n\n变量命名的基本规则如下：\n\n* 变量名不能以数字开头  \n* 变量名不能是 Python 的保留字符，比如 `is`、`in` 等  \n* 不能含有 `+`、`-`、`*`、空格等特殊字符，但可以包含下划线 `_`  \n* 变量名区分大小写\n\n虽然 Python 的变量名要求相对比较宽松，但是还是有一些良好的习惯需要注意：\n\n* 尽量不要使用中文做变量名  \n* 变量名要有意义，方便阅读  \n* 尽量不要使用下划线开头，因为下划线开头的变量在 Python 中可能有特殊含义  \n* 如果变量名包含几个单词，可以用下划线区分，或使用驼峰规则，如：`cat_weight`，或者 `CatWeight`  \n\n除了简单的使用等号赋值之外，Python 还有其他几个比较方便的赋值语句，比如：\n\n- `a += b` 等价于 `a = a + b`  \n- `a -= b` 等价于 `a = a - b`  \n- `a *= b` 等价于 `a = a * b`  \n- `a /= b` 等价于 `a = a / b`  \n- `a **= b` 等价于 `a = a ** b`  \n- `a //= b` 等价于 `a = a // b`  \n- `a %= b` 等价于 `a = a % b`  \n\n## 字符串\n\n除了数值类型，字符串也是一种常用的数据类型。在 Python 中，即可以用单引号 `''`，也可以用双引号 `\"\"` 来标记字符串，二者等价：\n\n采用两种标记符，有助于处理一些特殊情形，比如\n\n\n也就是说，字符串内包含 `'` 时，我们可以用双引号括起来，反之亦然。当然，有时候字符串内会同时包含单引号和双引号，此时我们可以使用转义字符 `\\` 来解决这个问题，比如：\n\n\n此处，我们用 `\\\"` 来表示字符串中的双引号，以避免与外围的双引号冲突。类似地，我们也可以用 `\\'` 来表示字符串中的单引号。\n\n除了单引号之外，还有一些其他的字符需要转义，比如，斜杠 `\\` 本身就需要转义，因为如果不对 `\\` 转义，解释器无法知晓这个斜杠是一个纯粹的斜杠，还是与后面的字符链接起来的转义字符，比如：\n\n除此之外，Python 中还有其他转义字符：\n\n* 每一行结尾处的 `\\`：续行符  \n* `\\\\`：反斜杠  \n* `\\'`：单引号  \n* `\\\"`：双引号  \n* `\\b`：退格  \n* `\\v`：纵向制表符  \n* `\\t`：横向制表符  \n* `\\r`：回车  \n* `\\n`：换行  \n* `\\f`：换页  \n* ......\n\n举几个例子：\n\n在 Python 中，`\\n` 表示 **换行符**，而 `\\r` 表示 **回车符**。它们的作用略有不同，具体如下：\n\n* `\\n` 会将光标移到下一行的开头，相当于“**换行并定位至该行行首**”；\n* `\\r` 只会将光标移到**当前行的行首**，但不会换行，因此它会从当前行的开头开始重新输出字符，可能会覆盖原来的内容。\n\n来看一个例子：\n\n第二个输出结果有点奇怪，是因为 `\\r` 把光标拉回了行首 (没有换行)，然后开始打印 `搞定了`。这会覆盖原有字符 `Downloading...` 中开头 3 个字符 (`Dow`)，最终变成了 `搞定了nloading...`。\n\n这种 `\\r` 的行为在一些进度条或动态打印时非常常见。下面的代码中，由于每次打印都用 `\\r` 把光标拉回了行首，覆盖原内容，所以你看到的其实**只有一行在不断刷新**。\n\n\n除了使用单引号和双引号表示字符串之外，Python 还支持长字符串、原始字符串两种表示方法：长字符串使用三个单引号 `'''` 或者三个双引号 `\"\"\"` 包裹，可以用来表示跨越多行的字符串。比如：\n\n而原始字符串即不对反斜杠进行转义，比如一个路径可能为：\n```python\na = \"C:\\network\\table\"\n```\n\n然而注意到，由于 `\\n` 有转义，所以 Python 解释器在碰到 `\\n` 时将其解释为回车。同理，`\\t` 则会被解释为 **Tab**：\n\n如果需要声明该字符串为原始字符串，可以直接在字符串前面加一个“r”，即：\n\n此时，Python解释器就不会将“\\\\n”进行转义了。\n\n此外，Python3中所有的字符串都是以Unicode进行编码的，因而极大地规避了在Python2以及其他语言中可能碰到的乱码问题，因而使用Python3是非常方便的。也正因为如此，我们可以很方便的使用Unicode字符，并使用“\\\\N{unicode_name}”来表示Unicode字符，比如：\n\nUnicode字符可以从 http://unicode-table.com 中找到。\n\n如果需要拼接两个字符串，可以简单的使用加号：\n\n最后需要额外注意的是，作为字符串的 \"3\" 和作为整型数据的 3 是完全不一样的。因此，我们不能使用如下表达式：\n```python\n\"3\" + 2\n```\n\n正确的做法是：先使用 `int()` 函数将字符串 \"3\" 转化为数值类型，再进行计算：\n\n同理，如果希望将一个数值型数字处理为字符串，也需要使用 `str()` 函数先将数字转化为字符串：\n\n## 列表和元组\n\n以上我们初步介绍了 Python 的三种基本数据类型：整型、浮点型以及字符串。接下来我们引入 Python 中的两种最基本也是最常用的数据结构：**列表**（list）和 **元组**（tuple）。\n\n列表和元组都是序列（sequence）的一种，可以看成是一些元素的集合，每个元素都有其位置编号，编号从 0 开始。列表使用方括号 \"[ ]\" 进行声明，而元组使用小括号 \"( )\" 进行声明，或者不用括号直接声明。列表和元组所包含的内容可以是任何 Python 允许的数据类型、对象等等。\n\n### 元组\n\n最简单也是最基本的是元组。元组不可更改，一旦创建，只能读取而不能写入 (定义后不能修改)，比如：\n\n我们可以使用元组名后面加一个方括号读取相应编号位的元素：\n\n由于编号从 0 开始，因而 `name_list[0]` 代表的是元组中的第一个元素，而 `name_list[1]` 代表第二个元素。方括号中也可以是负数，代表倒数第几个元素：\n\n此外，如果需要声明只有一个元素的元组，需要额外加一个逗号，否则解释器无法判断需要声明的是一个值还是一个元组：\n\n当然，在声明元组时，一个良好的习惯是加上括号，使得程序更具有可读性。\n\n由于元组也是 Python 中的对象，因而元组中的元素也可以是元组，并可以使用两个方括号对作为元组成员的元组中的元素进行读取操作：\n\n元组虽然不能修改，但支持切片（slicing）操作：可以从元组中取出一个子集。切片操作使用元组名后加方括号，在方括号中用冒号“:”指定起始和结束位置（注意是左闭右开区间）：\n\n实际上，切片操作还可以支持步进，切片的通用语法为：\n```python\nx[start:end:step]\n```\n\n其中start的默认值为0，step的默认值为1，而end的默认值为x的维数的大小。如果我们只想取出奇数位的元素，我们可以使用：\n\n以上切片操作被翻译为：从0开始，一直到结束，隔一个取一个元素。\n\n### 列表\n\n列表的很多操作跟元组类似，但是列表允许被修改，因而更加灵活，也有更多的操作。\n\n我们可以很方便的使用方括号定义一个列表：\n\n注意以上声明的过程中，与元组唯一的不同是我们在最外面使用了方括号而非圆括号。\n\n或者，我们可以使用 `list()` 将一个**可迭代**（**iterable**）的对象（包括字符串、元组、列表等）转化为一个列表，比如：\n\n与列表不同的是，我们可以对列表进行修改操作：\n\n以及使用del语句进行删除操作：\n\n当然，也可以进行新增，使用列表的append()方法可以在列表最后添加一个元素，比如：\n\n如果需要添加的元素比较多，可以使用extend()方法，比如：\n\n如果需要在某一个位置插入元素，可以使用insert()方法：\n\n还可以使用count()方法计算某个元素出现的次数、使用index()方法找到某个元素第一次出现的位置，比如：\n\n需要特别注意的是，在Python中，使用等号将一个对象赋值给另一个对象，并不会导致对象的拷贝，而仅仅是给了一个别名，比如：\n\n在以上程序中，我们会发现，虽然我们删除的是another_play_list的第2个元素，但是实际上，another_player_list和play_list只是同一个变量的不同别名而已，并没有重新复制一个新的list。\n\n如果我们需要的是list的一个新的拷贝，需要使用list的copy()方法：\n\n最后，列表、元组、字符串还支持in操作符，该操作符判断in之前的元素是否属于之后的列表、元组或者字符串，比如：\n\n如果要判断in之前的元素“不属于”之后的列表、元组或字符串，可以使用“not in”:\n\n最后，我们还可以使用 `sort()` 方法对列表进行排序，比如：\n\n在比较复杂的情况下，还可以使用key选项制定排序的方式，比如，我们可能需要对player_list中的球员号码进行排序，可以使用：\n\n当然，以上的语法已经超出了目前所学范围，我们将在后面介绍lambda的含义。\n\n## 集合\n\n无论是列表还是元组，都允许有重复的元素存在，但是有时我们可能需要不重复的元素，此时可以使用**集合**（**set**）类。\n\n集合的声明与列表类似，区别在于集合使用大括号{}，而非中括号。\n\n与list()类似，可以使用使用set()构建集合：\n\n以上可以看到，set()构建了一个不重复元素组成的集合。可以使用add()方法以及update()方法为集合新增元素，比如：\n\n值得注意的是，在上面的程序中，我们添加了字符串'a'，以及一个元组('a',)，两者一个是字符串，一个是元组，是不同的，因而在集合中两者并不冲突。\n\n如果需要删除，可以使用remove()方法以及discard()方法，两者的区别在于：remove()方法不能删除不存在的元素，否则报错；而discard()方法如果要删除的元素不存在，不会报错。\n\n最后，作为集合，还可以使用issubset()和issuperset()方法判断某一个集合是不是另外一个集合的子集或者超集：\n\n## 控制语句：循环\n\n有时我们需要重复一条类似的命令很多次，此时我们可以使用循环命令。\n\n在Python中有两个循环语句：while和for，两者很大程度上是等价的，但是在不同情况下方便程度时不一样的。\n\nfor作为关键字，其基本语法为：\n```python\nfor var in iterable_obj:\n    ## code\n```\n\n其中var为一个变量，iterable_obj为一个可迭代对象，如列表、元组或者字符串，其后面紧接着跟着一个冒号。\n\n在这里需要注意的是，不像C或者Java使用大括号区分代码块，在Python中，主要靠缩进区分代码块，因而需要循环执行的代码，要写在for语句的下一行，并使用Tab键或者几个（一般为4/8个）空格进行缩进。\n\n比如，以下语句把字符串中的每个字符都分别打印出来：\n\n而以下代码将player_list中所有的人名及号码打印出来：\n\n注意到最后一行并没有被缩进，因而不属于需要循环执行的代码块，因而只执行了一次。\n\n此外，经常遇到的一个情形是对数字进行循环，此时可以使用range()函数。如果使用range(N)，将会返回一个可迭代的对象，其值为0,...,N-1。比如：\n\n也可以使用range(N,M)的形式，此时返回迭代对象的值为N,N+1,...,M-1，比如：\n\n使用以上特性，我们可以方便的使用range()函数来写for 循环，比如：\n\n其中len()函数取得name中元素的个数，由于len(name)的值为5，因而range(len(name))就产生了一个可以迭代的、值为0,1,2,3,4的对象。\n\n以下程序计算了从1到101的所有奇数的和：\n\n而while循环的语法为：\n```python\nwhile logic_expression:\n    ## code\n```\n\n同样，while循环的代码块也需要用缩进表示，而logic_expression是一个逻辑判断语句，只有当logic_expression值为真时，循环才继续执行，否则跳出循环。比如刚刚从1到101的所有奇数的和的代码也可以写为：\n\n特别需要注意的是一定不要忘了及时更新odd，否则很容易造成无限循环。\n\n## 控制语句：条件\n\n条件语句用于判断某一个逻辑表达式，如果为真，则执行某个代码块。其最基本的形式如下：\n```python\nif logic_expression:\n    ## code\n```\n\n同样，代码块也需要用缩进表示，其中的代码块只有当logic_expression的值为真时才执行，否则不执行。\n\n比如，如下的代码中，首先判断球员姓名是否为Messi或者Suárez，如果是，则打印其位置：\n\n此外，if 后面还可以跟elif语句：\n```python\nif logic_expression1:\n    ## code1\nelif logic_expression2:\n    ## code2\nelif  logic_expression3:\n    ## code3\n....\n```\n\n即“else if”，如果logic_expression1满足，则执行code1，如果不满足，则继续判断logic_expression2是否满足，若满足，则执行code2，以此类推。比如：\n\n最后，还可以加else语句，用于所有的if或者elif的逻辑表达式都不满足时执行\n\n此外，if语句可以与break、continue、pass等一起控制循环。其中：\n\n* break：跳出循环不再执行\n* countinue：跳出本次循环后面的代码，但是循环继续执行\n* pass：什么都不做，继续执行\n\n比如，计算从1到101的所有奇数的和的代码也可以写为：\n\n在以上代码中，while True代表循环会一直执行，但是if语句会判断odd是否大于了101，如果odd一旦大于101，就会使用break退出循环。\n\n如果我们需要计算从1到101的所有不能被5整除的奇数的和，可以使用pass语句：\n\n以下代码我们使用continue语句将一个字符串中所有的's'都给去掉\n\n在以上代码中，当碰到's'时，循环跳过了b+=s这一句，而是继续执行循环，直到循环结束。与之相比的是break命令直接跳出了循环：\n\n## 实例\n\n在上例中，我们使用了 **列表推导式**（List Comprehension）写法：`passed_students` 是一个新列表，它通过列表推导式从 `students` 列表中筛选出所有 `\"score\"` 大于等于 60 的学生字典 `s`。这种写法逻辑简洁、表达紧凑：\n\n```python\npassed_students = [s for s in students if s[\"score\"] >= 60]\n```\n\n它等价于下面的传统写法：\n\n```python\npassed_students = []\nfor s in students:\n    if s[\"score\"] >= 60:\n        passed_students.append(s)\n```\n\n两者实现的功能完全一致，都是**遍历 `students` 列表，对每个学生字典 `s` 检查其 `\"score\"` 值是否大于等于 60**，如果是，就将该学生加入新的列表 `passed_students`。\n\n列表推导式的优势在于：\n\n* 写法简洁，更适合一行逻辑较清晰的筛选任务；\n* 常用于数据清洗、筛选、转换等操作，阅读性和执行效率较高。\n\n当逻辑比较复杂（如嵌套循环或多个条件判断）时，仍推荐使用传统的 `for` 循环方式，更利于维护和调试。\n\n\n\n## 控制语句：异常\n\n理想与现实总是有差距的。在程序现实运行过程中，出于很多原因，总是可能会存在**异常**（**exception**）。比如，一个最简单的异常是，允许用户输入两个数字相除，但是用户却输入了0作为分母；或者，用户输入的不是数字，而是字母。此时，正常的程序可能会发生错误。\n\n任何高级语言几乎都带有处理异常的功能，Python也不例外。\n\n在Python中，可以使用try...except...else...finally语句来处理异常，语法为：\n```python\ntry:\n    # code1\nexcept Exception1:\n    # code2\nexcept Exception2:\n......\n\nelse:\n    # code3\nfinally:\n    #code4\n```\n\n首先，解释器会执行code1，如果没有错误，就执行code3，并继续下去。如果发生了错误，会查看具体发生何种错误，执行相应的except中的命令。最终，无论错误是否发生，code4都会被执行，并继续执行finally后面的代码。\n\n比如，下面一个例子展示了分母为0时的处理方法：\n\nexcept可以不止有一个，比如，我们可能还需要处理类型错误，比如将数字和字符串进行运算：\n\n或者可以将两者合并：\n\n如果不知道会发生什么错误，也可以什么也不加，捕获所有错误：\n\n更好的办法是将错误捕获，并打印出来方便调试：\n\n## 列表推导\n\n在Python中，可以结合循环语句for、判断语句if、else等，写出更加简洁的程序。\n\n比如，如果我们希望生成一个1...99中所有能被3整除的奇数的表达式，一般可以通过如下的程序：\n\n以上代码已经足够简洁，但是Python还支持以下更简洁的方式：\n\n当然，也支持双重循环，比如列出一个奇数元组，第一个分类能被3整除，第二个分类能被5整除：\n\n此外还支持else语句，比如，以下代码将1...10的所有奇数都取负数，所有偶数保持不变：\n\n注意如果需要使用else，if...else...要写在for前面。\n\n## 字典\n\n**字典**（**dictionary**）在Python中是一种映射关系，即特定的单词（**键**，**key**）以及其**值**（**value**）之间的关系。字典可以使用大括号配合冒号进行声明，比如之前的球员号码：\n\n在以上的代码中，我们使用大括号以及冒号声明了一个字典：playsers，其中键为\"Messi\"、\"Xavi\"等等，其值分别为10、6等等。接着，使用players\\['Messi'\\]取得了键为'Messi'的值。另外也可以使用dict()进行创建：\n\n与上面的结果一样。\n\n在循环语句中，可以使用通常的循环方法获得一个字典的keys：\n\n在以上循环中，我们使用循环遍历了players中所有的键，并将其值打印了出来。\n\n此外，字典还支持如下操作：\n\n* len(players)：字典players的键-值对的个数\n* del players(k)：删除键k\n* k in players：判断字典players中是否有键k\n\n比如：\n\n## Python中的None\n\n在Python中还有一个非常特殊的类型：None，即什么都没有。注意None并不是空的元组、列表，也不是空的字符串，就是None：\n\n由于None表示空的、没有，因而None跟其他任何数据类型比较都是返回False。\n\n如果要判断某个变量是否是None，可以使用is关键字：\n\n## 小结\n\n最后，我们使用一个综合的例子，回顾一下目前未知所学的内容。\n\n在接下来的程序中，我们使用input()函数从用户的输入中得到数字，知道用户输入“end”为止，并将所有的数字相加。\n\n在以上的程序中，我们首先使用input()函数获得用户输入，接着判断用户输入的是否为\"end\"，如果是，则退出，否则，由于input()获得的是一个字符串，因而我们使用float()函数将该字符串转换为一个浮点数字，再将其相加。\n\n但是以上程序并不完美，比如，如果用户输入的不是“end”也不是数字，就会报错，因而一个更完善的版本是加入错误处理：\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":true,"highlight-style":"atom-one","css":["../styles.css"],"output-file":"01_py_01_basic.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","editor":"visual","theme":"cosmo","linestretch":1.6,"fontsize":"11.5pt","highlight":true,"callout-appearance":"default","md-extensions":["callout"],"includes":{"after-body":"../_includes/counter.html"},"title":"Python 入门"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}